/*
 * Permission is hereby granted, free of charge, to any human obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit humans to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

{
  "templateName": "Instruction.java.ftl",
  "dataModel": {
    "argument_to_class_name" : {
      "Imm8": "Imm8",
      "Imm16": "Imm16",
      "Imm32": "Imm32",
      "Imm64": "Imm64",
      "GPRegister8": "Reg8",
      "GPRegister16": "Reg16",
      "GPRegister32": "Reg32",
      "GPRegister64": "Reg64",
      "GPAddress16/8": "Addr16Mem8",
      "GPAddress16/16": "Addr16Mem16",
      "GPAddress16/32": "Addr16Mem32",
      "GPAddress16/64": "Addr16Mem64",
      "GPAddress32/8": "Addr32Mem8",
      "GPAddress32/16": "Addr32Mem16",
      "GPAddress32/32": "Addr32Mem32",
      "GPAddress32/64": "Addr32Mem64",
      "EIPAddress32/8": "EIPAddr32Mem8",
      "EIPAddress32/16": "EIPAddr32Mem16",
      "EIPAddress32/32": "EIPAddr32Mem32",
      "EIPAddress32/64": "EIPAddr32Mem64",
      "GPAddress64/8": "Addr64Mem8",
      "GPAddress64/16": "Addr64Mem16",
      "GPAddress64/32": "Addr64Mem32",
      "GPAddress64/64": "Addr64Mem64",
      "RIPAddress64/8": "RIPAddr64Mem8",
      "RIPAddress64/16": "RIPAddr64Mem16",
      "RIPAddress64/32": "RIPAddr64Mem32",
      "RIPAddress64/64": "RIPAddr64Mem64"
    },
    "argumeng_name_to_type_name": {
      "Imm8": "byte",
      "Imm16": "short",
      "Imm32": "int",
      "Imm64": "long",
      "GPRegister8": "GPRegister8",
      "GPRegister16": "GPRegister16",
      "GPRegister32": "GPRegister32",
      "GPRegister64": "GPRegister64",
      "GPAddress16/8": "GPAddress16",
      "GPAddress16/16": "GPAddress16",
      "GPAddress16/32": "GPAddress16",
      "GPAddress16/64": "GPAddress16",
      "GPAddress32/8": "GPAddress32",
      "GPAddress32/16": "GPAddress32",
      "GPAddress32/32": "GPAddress32",
      "GPAddress32/64": "GPAddress32",
      "EIPAddress32/8": "EIPAddress32",
      "EIPAddress32/16": "EIPAddress32",
      "EIPAddress32/32": "EIPAddress32",
      "EIPAddress32/64": "EIPAddress32",
      "GPAddress64/8": "GPAddress64",
      "GPAddress64/16": "GPAddress64",
      "GPAddress64/32": "GPAddress64",
      "GPAddress64/64": "GPAddress64",
      "RIPAddress64/8": "RIPAddress64",
      "RIPAddress64/16": "RIPAddress64",
      "RIPAddress64/32": "RIPAddress64",
      "RIPAddress64/64": "RIPAddress64"
    },
    "instructions": [
      {
        "arguments" : [],
        "names" : {
          "nop" : "0x66? 0xf2? 0x90",
          "pause" : "0x66? 0xf3 0x90"
        }
      },
      {
        "arguments" : ["AX:GPRegisterNative", "Op:GPRegisterNative"],
        "names" : {
          "xchg" : "0xf2? 0xf3? 0x90"
        }
      },
      {
        "arguments" : ["Imm0:Imm8"],
        "names" : {
          "aad" : "0x66? 0xf2? 0xf3? 0xd5"
        }
      },
      {
        "arguments" : ["Op:GPRegister8", "Imm0:Imm8" ],
        "names" : {
          "mov" : "0x66? 0xf2? 0xf3? rexw? 0xb0"
        }
      },
      {
        "arguments" : ["Op:GPRegisterNative" ],
        "names" : {
          "dec" : "0xf2? 0xf3? 0x48",
          "inc" : "0xf2? 0xf3? 0x40"
        }
      },
      {
        "arguments" : ["Op:GPRegisterNative", "Imm0:ImmNative64" ],
        "names" : {
          "mov" : "0xf2? 0xf3? 0xb8"
        }
      },
      {
        "arguments" : ["Reg:GPRegister8", "Rm:GPRegister8/Memory8" ],
        "names" : {
          "add" : "0x66? 0xf2? 0xf3? rexw? 0x02",
          "mov" : "0x66? 0xf2? 0xf3? rexw? 0x8a",
          "sub" : "0x66? 0xf2? 0xf3? rexw? 0x2a"
        }
      },
      {
        "arguments" : ["Reg:GPRegisterNative", "Rm:GPRegisterNative/MemoryNative" ],
        "names" : {
          "add" : "0xf2? 0xf3? 0x03",
          "mov" : "0xf2? 0xf3? 0x8b",
          "sub" : "0xf2? 0xf3? 0x2b"
        }
      },
      {
        "arguments" : ["Rm:GPRegister8/Memory8" ],
        "names" : {
          "dec" : "0x66? 0xf2? 0xf3? rexw? 0xfe /1",
          "inc" : "0x66? 0xf2? 0xf3? rexw? 0xfe /0"
        }
      },
      {
        "arguments" : ["Rm:GPRegister8/Memory8", "Imm0:Imm8" ],
        "names" : {
          "mov" : "0x66? 0xf2? 0xf3? rexw? 0xc6 /0"
        }
      },
      {
        "arguments" : ["Rm:GPRegisterNative/MemoryNative" ],
        "names" : {
          "dec" : "0xf2? 0xf3? 0xff /1",
          "inc" : "0xf2? 0xf3? 0xff /0"
        }
      },
      {
        "arguments" : ["Rm:GPRegisterNative/MemoryNative", "Imm0:ImmNative" ],
        "names" : {
          "mov" : "0x66? 0xf2? 0xf3? rexw? 0xc7 /0"
        }
      },
      {
        "arguments" : ["Rm:GPRegister8/Memory8", "Reg:GPRegister8" ],
        "names" : {
          "add" : "0x66? 0xf2? 0xf3? rexw? 0x00",
          "mov" : "0x66? 0xf2? 0xf3? rexw? 0x88",
          "sub" : "0x66? 0xf2? 0xf3? rexw? 0x28"
        }
      },
      {
        "arguments" : ["Rm:GPRegisterNative/MemoryNative", "Reg:GPRegisterNative" ],
        "names" : {
          "add" : "0xf2? 0xf3? 0x01",
          "mov" : "0xf2? 0xf3? 0x89",
          "sub" : "0xf2? 0xf3? 0x29"
        }
      }
    ]
  }
}
